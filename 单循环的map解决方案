class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        //这次同样是用map解决当前问题，与上面一种方法有所不同的是，在插入的过程中直接判断补数complement是否存在
        //这个算法能够奏效的关键在于，若存在nums[i]+nums[j]==target,那么i,j一定是成对出现的，也就是说
        //不妨假定nums[i]先插入map，那么即使nums[i]
        //第一时间没有找到nums[j]与他适配（因为nums[j]还有没插入到map中），在nums[j]插入时，也可以找到nums[i]；    
        
        vector<int>result;
        //1、建立map<nums[i],i>
        map<int,int>hash;
        //向map中一边插入，一边判断是否存在配对
        for(int i=0;i<nums.size();i++){
            int complement=target-nums[i];
            
            
            if(hash.find(complement)!=hash.end()){
                //找到，将hash[complement],i写入result；
                result.push_back(i);
                result.push_back(hash[complement]);
                return result;
            }
            hash[nums[i]]=i;
            //插入（nums[i],i）,插入必须放在后面，防止像[3,3],target=6这样的case，因为3,3key值一样，第二次会拒绝插入
            //放在后面插入时直接就return了
        }
        return result;
    }
};
